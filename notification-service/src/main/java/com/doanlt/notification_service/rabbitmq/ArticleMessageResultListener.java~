package com.doanlt.notification_service.rabbitmq;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.MailAuthenticationException;
import org.springframework.mail.MailSendException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ArticleMessageResultListener {
    private final ArticleMessageResultProducer articleMessageResultProducer;
    private final JavaMailSender mailSender;
    private final String emailFrom; // Optional: if you want to configure from address separately

    public ArticleMessageResultListener(
            ArticleMessageResultProducer articleMessageResultProducer,
            JavaMailSender mailSender,
            @Value("${spring.mail.username}") String emailFrom) {
        this.articleMessageResultProducer = articleMessageResultProducer;
        this.mailSender = mailSender;
        this.emailFrom = emailFrom;
    }

    @RabbitListener(queues = RabbitMQConfig.RESULT_QUEUE)
    public void handleArticleCreate(ArticleCreateResultMessage msg) {
        // Thực hiện toàn bộ logic tạo article như trong Controller cũ
        // Lưu paper, tạo participations, update author string...
//        System.out.println("Nhận message tạo article: " + msg);
        if(msg.getStatus().equals("success")){
            sendNotificationEmails(msg.getEmails());
        }
        System.out.println(msg);

        articleMessageResultProducer.sendArticleResultMessage(msg.getMessage());
    }
    private void sendNotificationEmails(List<String> emails) {
        if (emails == null || emails.isEmpty()) {
            return;
        }

        String subject = "New Article Publication Notification";
        String content = "Bài báo mới có sự tham gia của bạn đã được đăng tải";

        for (String email : emails) {
            try {
                // Validate email format trước khi gửi
                if (!isValidEmail(email)) {
                    System.err.println("Invalid email format: " + email);
                    continue;
                }

                SimpleMailMessage message = new SimpleMailMessage();
                message.setFrom(emailFrom);
                message.setTo(email);
                message.setSubject(subject);
                message.setText(content);

                mailSender.send(message);
                System.out.println("Email sent successfully to: " + email);

            } catch (MailAuthenticationException e) {
                System.err.println("Authentication failed for email: " + email);
                // Có thể dừng luôn vòng lặp vì lỗi xác thực ảnh hưởng toàn bộ
//                break;

            } catch (MailSendException e) {
                System.err.println("Failed to send email to: " + email);
                // Có thể log chi tiết exception nếu cần
                if (e.getFailedMessages() != null) {
                    e.getFailedMessages().forEach((k, v) ->
                            System.err.println("Failed message details: " + k + " - " + v));
                }

            } catch (Exception e) {
                System.err.println("Unexpected error when sending to: " + email);
                e.printStackTrace();
            }
        }
    }

    // Phương thức đơn giản kiểm tra format email
    private boolean isValidEmail(String email) {
        return email != null && email.matches("^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$");
    }
}
