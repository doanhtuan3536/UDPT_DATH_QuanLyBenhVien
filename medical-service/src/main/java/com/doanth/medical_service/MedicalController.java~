package com.doanth.medical_service;

import com.doanth.medical_service.dto.*;
import com.doanth.medical_service.models.MedicalRecord;
import com.doanth.medical_service.models.Prescription;
import com.doanth.medical_service.models.PrescriptionDetail;
import com.doanth.medical_service.security.JwtValidationException;
import com.doanth.medical_service.security.User;
import com.doanth.medical_service.service.MedicalRecordService;
import com.doanth.medical_service.service.PrescriptionService;
import com.doanth.medical_service.serviceClient.AuthServiceClient;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

import java.util.List;
import java.util.stream.Collectors;

@Controller
@RequestMapping("/api/medical")
public class MedicalController {
    private final MedicalRecordService medicalRecordService;
    private ModelMapper modelMapper;
    private AuthServiceClient authServiceClient;
    private PrescriptionService prescriptionService;
    @Value("${service.auth.username}")
    private String serviceUsername;

    @Value("${service.auth.password}")
    private String secretPassword;

    public MedicalController(MedicalRecordService medicalRecordService, ModelMapper modelMapper, AuthServiceClient authServiceClient, PrescriptionService prescriptionService) {
        this.medicalRecordService = medicalRecordService;
        this.modelMapper = modelMapper;
        this.authServiceClient = authServiceClient;
        this.prescriptionService = prescriptionService;
    }

    @GetMapping("/records")
    public ResponseEntity<?> medicalRecords() throws JwtValidationException {
//        MedicalRecord medicalRecord = medicalRecordService.getMedicalRecord(medicalRecordId);
//        String accessToken = authServiceClient.login(serviceUsername, secretPassword);
//        DoctorInfoDTO doctorInfoDTO = authServiceClient.getDoctorInfo(medicalRecord.getDoctorId(), accessToken);
//        MedicalRecordShortDTO medicalRecordShortDTO = entity2DTO(medicalRecord);
//        medicalRecordShortDTO.setDoctorName(doctorInfoDTO.getHoten());
        Authentication authentication  = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        List<MedicalRecord> medicalRecords = medicalRecordService.listByPatientId(user.getUserId());
        List<MedicalRecordShortDTO> medicalRecordShortDTOS = listEntity2ListDTO(medicalRecords);
        String accessToken = authServiceClient.login(serviceUsername, secretPassword);
        int size = medicalRecordShortDTOS.size();
        for (int i = 0; i < size; i++) {
            medicalRecordShortDTOS.get(i).setDoctorName(authServiceClient.getUserInfo(medicalRecordShortDTOS.get(i).getDoctorId(), accessToken).getHoten());
        }
        return ResponseEntity.ok(medicalRecordShortDTOS);
    }
    @GetMapping("/records/{id}")
    public ResponseEntity<?> medicalRecordDetails(@PathVariable("id") Integer medicalRecordId) throws JwtValidationException {
        MedicalRecord medicalRecord = medicalRecordService.getMedicalRecord(medicalRecordId);
        String accessToken = authServiceClient.login(serviceUsername, secretPassword);
        UserInfoDTO userInfoDTO = authServiceClient.getUserInfo(medicalRecord.getDoctorId(), accessToken);
        MedicalRecordFullDTO medicalRecordfullDTO = entity2fullDTO(medicalRecord);
        medicalRecordfullDTO.setDoctorName(userInfoDTO.getHoten());
        if(medicalRecordfullDTO.getExaminations() != null) {
            for (ExaminationDTO examination : medicalRecordfullDTO.getExaminations()) {
                examination.setDoctorName(authServiceClient.getUserInfo(examination.getDoctorId(), accessToken).getHoten());
            }
        }
//        List<MedicalRecord> medicalRecords = medicalRecordService.listByPatientId(medicalRecordId);
//        List<MedicalRecordShortDTO> medicalRecordShortDTOS = listEntity2ListDTO(medicalRecords);
//        String accessToken = authServiceClient.login(serviceUsername, secretPassword);
//        int size = medicalRecordShortDTOS.size();
//        for (int i = 0; i < size; i++) {
//            medicalRecordShortDTOS.get(i).setDoctorName(authServiceClient.getDoctorInfo(medicalRecordShortDTOS.get(i).getDoctorId(), accessToken).getHoten());
//        }
        return ResponseEntity.ok(medicalRecordfullDTO);
    }
    @GetMapping("/prescription/details/{id}")
    public ResponseEntity<?> prescriptionDetails(@PathVariable("id") Integer examinationId) throws JwtValidationException {
        Authentication authentication  = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        int patientId = user.getUserId();
        int examId = examinationId;
        Prescription prescription = prescriptionService.getPrescription(patientId, examId);
        List<PrescriptionDetail> prescriptionDetail = prescription.getPrescriptionDetails();
        String accessToken = authServiceClient.login(serviceUsername, secretPassword);
        UserInfoDTO userInfoDTO = authServiceClient.getUserInfo(patientId, accessToken);
        PrescriptionDetailDTO prescriptionDetailDTO = new PrescriptionDetailDTO();
        prescriptionDetailDTO.setPatientId(patientId);
        prescriptionDetailDTO.setPatientName(userInfoDTO.getHoten());
        prescriptionDetailDTO.setCreatedAt(prescription.getCreatedAt());
        int doctorId = prescription.getExamination().getDoctorId();
        prescriptionDetailDTO.setDoctorId(doctorId);
        UserInfoDTO doctorInfoDTO = authServiceClient.getUserInfo(doctorId, accessToken);
        prescriptionDetailDTO.setDoctorName(doctorInfoDTO.getHoten());
        prescriptionDetailDTO.setStatus(prescription.getStatus());
        double totalPrice = 0;
        for (PrescriptionDetail prescriptionDetail1 : prescriptionDetail) {
            totalPrice += prescriptionDetail1.getQuantity() * prescriptionDetail1.getMedicine().getPrice();
            MedicineDTO medicineDTO = new MedicineDTO();
            medicineDTO.setMedicineId(prescriptionDetail1.getMedicine().getMedicineId());
            medicineDTO.setMedicineName(prescriptionDetail1.getMedicine().getMedicineName());
            medicineDTO.setQuantity(prescriptionDetail1.getQuantity());
            medicineDTO.setPrice(prescriptionDetail1.getMedicine().getPrice());
            medicineDTO.setTotalPrice(prescriptionDetail1.getQuantity() * prescriptionDetail1.getMedicine().getPrice());
            prescriptionDetailDTO.getMedicines().add(medicineDTO);
        }
        prescriptionDetailDTO.setTotalPrice(totalPrice);
        return ResponseEntity.ok(prescriptionDetailDTO);
    }

    private MedicalRecordShortDTO entity2DTO(MedicalRecord entity) {
        return modelMapper.map(entity, MedicalRecordShortDTO.class);
    }
    private MedicalRecordFullDTO entity2fullDTO(MedicalRecord entity) {
        return modelMapper.map(entity, MedicalRecordFullDTO.class);
    }
    private List<MedicalRecordShortDTO> listEntity2ListDTO(List<MedicalRecord> listEntity) {

        return listEntity.stream().map(entity -> entity2DTO(entity))
                .collect(Collectors.toList());

    }

}
