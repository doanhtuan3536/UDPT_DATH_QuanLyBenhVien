package com.doanth.auth_service;

import com.doanth.auth_service.dto.LoginForm;
import com.doanth.auth_service.dto.SignupForm;
import com.doanth.auth_service.dto.SignupResult;
import com.doanth.auth_service.model.User;
import com.doanth.auth_service.security.auth.AuthResponse;
import com.doanth.auth_service.security.auth.TokenService;
import com.doanth.auth_service.security.config.CustomUserDetails;
import com.doanth.auth_service.security.refreshtoken.RefreshTokenExpiredException;
import com.doanth.auth_service.security.refreshtoken.RefreshTokenNotFoundException;
import com.doanth.auth_service.security.refreshtoken.RefreshTokenRequest;
import com.doanth.auth_service.service.UserService;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/api/auth")
public class AuthController {
    private final PasswordEncoder passwordEncoder;
    private final UserService userService;
    private final AuthenticationManager authenticationManager;
//    private final JwtUtility jwtUtil;
    private final TokenService tokenService;

    public AuthController(PasswordEncoder passwordEncoder, UserService userService,
                          AuthenticationManager authenticationManager, TokenService tokenService) {
        this.authenticationManager = authenticationManager;
        this.passwordEncoder = passwordEncoder;
        this.userService = userService;
//        this.jwtUtil = jwtUtil;
        this.tokenService = tokenService;
    }

    @PostMapping("/signup")
    public ResponseEntity<?> signup(@RequestBody SignupForm body) {
        SignupResult signupResult = new SignupResult();
        System.out.println(body);
        if(userService.emailExists(body.getEmail()))
        {
            signupResult.setStatus("error");
            signupResult.setMessage("Email đã tồn tại");
            signupResult.setEmail(body.getEmail());
            return ResponseEntity.badRequest().body(signupResult);
        }
        if (userService.usernameExists(body.getUsername())) {
            signupResult.setStatus("error");
            signupResult.setMessage("Tên đăng nhập đã tồn tại");
            signupResult.setEmail(body.getEmail());
            return ResponseEntity.badRequest().body(signupResult);
        }
        try {
            User newUser = new User();
            newUser.setUsername(body.getUsername());
            newUser.setPassword(passwordEncoder.encode(body.getPassword()));
            newUser.setEmail(body.getEmail());
            newUser.setGioitinh(body.getGioitinh());
            newUser.setHoten(body.getFullName());
            newUser.setNgaysinh(body.getNgaysinh());
            newUser.setStatus("active");
            newUser.setLoai("benhnhan");
            newUser.setSdt(body.getSdt());

            userService.saveUser(newUser);

            signupResult.setStatus("success");
            signupResult.setMessage("Tạo tài khoản thành công");
            signupResult.setEmail(body.getEmail());
            signupResult.setFullName(body.getFullName());
            signupResult.setUserName(body.getUsername());
            signupResult.setSdt(body.getSdt());
            return ResponseEntity.ok(signupResult);
        }
        catch (Exception e) {
            e.printStackTrace();
            signupResult.setStatus("error");
            signupResult.setMessage("Tạo tài khoản thất bại do lỗi hệ thống, vui lòng thử lại sau");
            signupResult.setEmail(body.getEmail());;
        }
        return ResponseEntity.badRequest().body(signupResult);
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginForm body) {
        try {
            String username = body.getUsername();
            String password = body.getPassword();

            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(username, password));
            CustomUserDetails customUserDetails = (CustomUserDetails) authentication.getPrincipal();

            AuthResponse token = tokenService.generateTokens(customUserDetails.getUser());

            return ResponseEntity.ok(token);
        } catch (BadCredentialsException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
    }

    @PostMapping("/token/refresh")
    public ResponseEntity<?> refreshToken(@RequestBody @Valid RefreshTokenRequest request) {
        try {
            AuthResponse response = tokenService.refreshTokens(request);
            return ResponseEntity.ok(response);

        } catch (RefreshTokenNotFoundException | RefreshTokenExpiredException e) {

            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

    }


}
