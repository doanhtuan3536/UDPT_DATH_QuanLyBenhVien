package com.doanth.qlbv_web.controllers;

import com.doanth.qlbv_web.dto.*;
import com.doanth.qlbv_web.serviceClient.AuthResponse;
import com.doanth.qlbv_web.serviceClient.JwtValidationException;
import com.doanth.qlbv_web.serviceClient.MedicalServiceClient;
import com.doanth.qlbv_web.serviceClient.RefreshTokenException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Controller
@RequestMapping("/medical-records")
public class MedicalController {
    private final MedicalServiceClient medicalServiceClient;

    public MedicalController(MedicalServiceClient medicalServiceClient) {
        this.medicalServiceClient = medicalServiceClient;
    }

    @GetMapping("/examinations/add")

    @GetMapping
    public String medicalRecords(Model model) throws RefreshTokenException, JwtValidationException {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        AuthResponse loggedUser = ((UserDetails) auth.getPrincipal()).getAuthResponse();
        String accessToken = loggedUser.getAccessToken();
        List<MedicalRecordShortDTO> medicalRecordShortDTOSDTO = medicalServiceClient.getRecordsByPatientId(accessToken);
//        System.out.println(medicalRecordShortDTOSDTO);
        model.addAttribute("medicalRecords", medicalRecordShortDTOSDTO);
        return "medical_records";
    }
    @GetMapping("/{patientId}")
    public String getMedicalRecordsByPatientId(Model model, @PathVariable("patientId") Integer patientId) throws RefreshTokenException, JwtValidationException {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        AuthResponse loggedUser = ((UserDetails) auth.getPrincipal()).getAuthResponse();
        String accessToken = loggedUser.getAccessToken();
        List<MedicalRecordShortDTO> medicalRecordShortDTOSDTO = medicalServiceClient.doctorGetRecordsByPatientId(patientId,accessToken);
//        System.out.println(medicalRecordShortDTOSDTO);
        model.addAttribute("medicalRecords", medicalRecordShortDTOSDTO);
        model.addAttribute("patientId", patientId);
        return "medical_records";
    }
    @GetMapping("/searching")
    public String medicalRecordsSearching(Model model) throws RefreshTokenException, JwtValidationException {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        AuthResponse loggedUser = ((UserDetails) auth.getPrincipal()).getAuthResponse();
        String accessToken = loggedUser.getAccessToken();
        List<UserDetailsFromDB> userDetailsWithMedicalRecordRecentCreated = medicalServiceClient.getPatientsWithMedicalRecordRecentCreated(accessToken);
        List<UserDetailsFromDB> userDetailsWithExaminationRecentCreated = medicalServiceClient.getPatientsWithExaminationRecentCreated(accessToken);
        System.out.println(userDetailsWithMedicalRecordRecentCreated);
        System.out.println(userDetailsWithExaminationRecentCreated);
        model.addAttribute("medicalRecordPatients", userDetailsWithMedicalRecordRecentCreated);
        model.addAttribute("examinationPatients", userDetailsWithExaminationRecentCreated);

        // Kiểm tra nếu chưa có userInfo từ search thì khởi tạo list rỗng
        if(!model.containsAttribute("userInfo")) {
            model.addAttribute("userInfo", new ArrayList<UserDetailsFromDB>());
        }

        // Thêm flash attributes nếu có
        if(!model.containsAttribute("errorMessage")) {
            model.addAttribute("errorMessage", "");
        }
        return "medical_records_searching";
    }

    @PostMapping("/searching")
    public String handleMedicalRecordsSearching(Model model, @RequestParam(value = "patientId", required = false, defaultValue = "") String patientId,
                                                @RequestParam(value = "patientFullName", required = false, defaultValue = "") String patientFullName, RedirectAttributes redirectAttributes) throws RefreshTokenException, JwtValidationException {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        AuthResponse loggedUser = ((UserDetails) auth.getPrincipal()).getAuthResponse();
        String accessToken = loggedUser.getAccessToken();
//        List<UserDetailsFromDB> userDetailsWithMedicalRecordRecentCreated = medicalServiceClient.getPatientsWithMedicalRecordRecentCreated(accessToken);
//        List<UserDetailsFromDB> userDetailsWithExaminationRecentCreated = medicalServiceClient.getPatientsWithExaminationRecentCreated(accessToken);
//        System.out.println(userDetailsWithMedicalRecordRecentCreated);
//        System.out.println(userDetailsWithExaminationRecentCreated);
        if(patientId.equals("") && patientFullName.equals("")){
            redirectAttributes.addFlashAttribute("errorMessage", "Vui lồng nhập thông tin của ít nhất 1 trường");
            return "redirect:/medical-records/searching";
        }
        if(!patientId.equals("") && !isNumeric(patientId)) {
            redirectAttributes.addFlashAttribute("errorMessage", "Id của bệnh nhân là một số nguyên > 0");
            return "redirect:/medical-records/searching";
        }

        List<UserDetailsFromDB> userInfoDTOS = medicalServiceClient.searchPatient(patientId, patientFullName, accessToken);
        redirectAttributes.addFlashAttribute("userInfo", userInfoDTOS);
        if(userInfoDTOS.isEmpty()) {
            redirectAttributes.addFlashAttribute("errorMessage", "Không tìm thấy bệnh nhân");
        }
        return "redirect:/medical-records/searching";
    }
    public boolean isNumeric(String str) {
        if (str == null || str.trim().isEmpty()) return false;
        try {
            Integer.parseInt(str.trim());
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }
    @GetMapping("/add")
    public String addMedicalRecords(Model model, @RequestParam(value = "patientId", required = false) Integer patientId) throws RefreshTokenException, JwtValidationException {
//        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
//        AuthResponse loggedUser = ((UserDetails) auth.getPrincipal()).getAuthResponse();
//        String accessToken = loggedUser.getAccessToken();
//        List<MedicalRecordShortDTO> medicalRecordShortDTOSDTO = medicalServiceClient.getRecordsByPatientId(accessToken);
////        System.out.println(medicalRecordShortDTOSDTO);
//        model.addAttribute("medicalRecords", medicalRecordShortDTOSDTO);

        if(!model.containsAttribute("medicalRecordForm"))
        {
            MedicalRecordAddForm medicalRecordAddForm = new MedicalRecordAddForm();
            medicalRecordAddForm.setPatientId(patientId);
            model.addAttribute("medicalRecordForm", medicalRecordAddForm);

        }
        model.addAttribute("patientId", patientId);



        return "medical_records_add";
    }
    @PostMapping("/add")
    public String handleAddMedicalRecords(@ModelAttribute("medicalRecordForm") MedicalRecordAddForm form, RedirectAttributes redirectAttributes, Model model) throws RefreshTokenException, JwtValidationException {
        redirectAttributes.addFlashAttribute("medicalRecordForm", form);
        System.out.println(form);
        if(form.getDischargeSummary().trim().equals("") || form.getHealthCondition().trim().equals("")) {
            redirectAttributes.addFlashAttribute("errorMsg", "Vui lòng nhập đầy đủ thông tin");

//            redirectAttributes.addAttribute("patientId", form.getPatientId());
            return "redirect:/medical-records/add?patientId=" + form.getPatientId();
        }
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        UserDetails loggedUser = (UserDetails) auth.getPrincipal();
        form.setDoctorId(loggedUser.getAuthResponse().getUserId());
        form.setCreatedAt(LocalDateTime.now());
        medicalServiceClient.addMedicalRecord(loggedUser.getAuthResponse().getAccessToken(), form);
        redirectAttributes.addFlashAttribute("successfulMsg", "Tạo hồ sơ bệnh án mới cho bệnh nhân có id: " + form.getPatientId() + " thành công.");
//        System.out.println(form);
        return "redirect:/medical-records/add?patientId=" + form.getPatientId();
    }


    @GetMapping("/details/{id}")
    public String medicalRecordsDetails(@PathVariable("id") Integer id, Model model) throws RefreshTokenException, JwtValidationException {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        AuthResponse loggedUser = ((UserDetails) auth.getPrincipal()).getAuthResponse();
        String accessToken = loggedUser.getAccessToken();
        MedicalRecordFullDTO medicalRecordFullDTO = medicalServiceClient.getRecordDetailsByRecordId(accessToken, id);
//        System.out.println(medicalRecordFullDTO);
        model.addAttribute("record", medicalRecordFullDTO);
        return "medical_record_details";
    }

    @GetMapping("/prescriptions/{examinationId}/{medicalRecordId}")
    public String prescriptions(@PathVariable("examinationId") Integer examinationId, @PathVariable("medicalRecordId") Integer medicalRecordId, Model model) throws RefreshTokenException, JwtValidationException {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        AuthResponse loggedUser = ((UserDetails) auth.getPrincipal()).getAuthResponse();
        String accessToken = loggedUser.getAccessToken();
//        MedicalRecordFullDTO medicalRecordFullDTO = medicalServiceClient.getRecordDetailsByRecordId(accessToken, id);
        PrescriptionDetailDTO prescriptionDetailDTO = medicalServiceClient.getPrescriptionDetail(accessToken, examinationId);
        System.out.println(prescriptionDetailDTO);
        model.addAttribute("prescription", prescriptionDetailDTO);
        // Thêm prescriptionId vào model để sử dụng trong breadcrumb
        model.addAttribute("medicalRecordId", medicalRecordId);
        model.addAttribute("examinationId", examinationId);
        return "prescription_details";
    }
}
