package com.doanth.qlbv_web.serviceClient;

import com.doanth.qlbv_web.dto.*;
import org.springframework.http.*;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

@Component
public class AuthServiceClient {
    private final RestTemplate restTemplate = new RestTemplate();
    private final String signupUrl = "http://localhost:8081/api/auth/signup";
    private final String loginUrl = "http://localhost:8081/api/auth/login";
    private final String refreshTokenUrl = "http://localhost:8081/api/auth/token/refresh";
    private final String newTokenUrl = "http://localhost:8081/api/auth/token";
    private final String serviceLoginUrl = "http://localhost:8081/api/auth/service/login";
    private final String userInfoUrl = "http://localhost:8081/api/auth/user";

    public SignupResult signup(SignupForm form) {// URL của Auth Service

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<SignupForm> request = new HttpEntity<>(form, headers);
        System.out.println(request);
        ResponseEntity<SignupResult> response = null;

        try{
            response= restTemplate.exchange(
                    signupUrl, HttpMethod.POST, request, SignupResult.class
            );
            return response.getBody();
        }
        catch(HttpClientErrorException e){
            return e.getResponseBodyAs(SignupResult.class);
        }
    }

    public AuthResponse login(String username, String password) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        LoginForm form = new LoginForm();
        form.setUsername(username);
        form.setPassword(password);

        HttpEntity<LoginForm> request = new HttpEntity<>(form, headers);
//        System.out.println(request);
        ResponseEntity<AuthResponse> response = null;

        try{
            response= restTemplate.exchange(
                    loginUrl, HttpMethod.POST, request, AuthResponse.class
            );
            System.out.println(response);
            return response.getBody();
        }
        catch(HttpClientErrorException e){
            throw new RuntimeException("Xác thực thất bại");
        }
    }

    public AuthResponse refreshToken(RefreshTokenRequest requestTokenRefresh) throws RefreshTokenException {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<RefreshTokenRequest> request = new HttpEntity<>(requestTokenRefresh, headers);
//        System.out.println(request);
        ResponseEntity<AuthResponse> response = null;

        try{
            response= restTemplate.exchange(
                    refreshTokenUrl, HttpMethod.POST, request, AuthResponse.class
            );
            System.out.println(response);
            return response.getBody();
        }
        catch(HttpClientErrorException e){
            String msg = e.getResponseBodyAsString();
            System.out.println(msg);
            throw new RefreshTokenException(msg);
        }
    }

    public AuthResponse getNewToken(String username, String password){
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        LoginForm form = new LoginForm();
        form.setUsername(username);
        form.setPassword(password);

        HttpEntity<LoginForm> request = new HttpEntity<>(form, headers);
//        System.out.println(request);
        ResponseEntity<AuthResponse> response = null;

        try{
            response= restTemplate.exchange(
                    newTokenUrl, HttpMethod.POST, request, AuthResponse.class
            );
            System.out.println(response);
            return response.getBody();
        }
        catch(HttpClientErrorException e){
            throw new RuntimeException("Lấy token thất bại");
        }
    }

    public AuthResponse handleAccessTokenExpired() throws RefreshTokenException {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        UserDetails userDetails = (UserDetails) authentication.getPrincipal();
        String refreshToken = userDetails.getAuthResponse().getRefreshToken();
        RefreshTokenRequest requestTokenRefresh = new RefreshTokenRequest();
        requestTokenRefresh.setUsername(userDetails.getUserName());
        requestTokenRefresh.setRefreshToken(refreshToken);
        AuthResponse authResponse = this.refreshToken(requestTokenRefresh);
        System.out.println(authResponse);
        userDetails.setAuthResponse(authResponse);
       return authResponse;
    }

    public String serviceLogin(String username, String password) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        LoginForm form = new LoginForm();
        form.setUsername(username);
        form.setPassword(password);

        HttpEntity<LoginForm> request = new HttpEntity<>(form, headers);
//        System.out.println(request);
        ResponseEntity<String> response = null;

        try{
            response= restTemplate.exchange(
                    serviceLoginUrl, HttpMethod.POST, request, String.class
            );
            System.out.println(response);
            return response.getBody();
        }
        catch(HttpClientErrorException e){
            throw new AccessTokenForServiceException("authentication for access token failed or the auth service server is down");
        }
    }
    public UserDetailsFromDB getuserInfo(Integer doctorId, String accessToken) throws JwtValidationException {
//        Claims claims = validateAccessToken(AccessTokenJwt);
//        return (DoctorInfoDTO) claims.get("doctorInfoDTO");
//        String accessToken = login(serviceUsername, secretPassword);
        String url = userInfoUrl + "/" + doctorId;
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken);
        HttpEntity<?> request = new HttpEntity<>(headers);
        ResponseEntity<DoctorInfoDTO> response = null;
        try{
            response= restTemplate.exchange(
                    url, HttpMethod.GET, request, DoctorInfoDTO.class
            );
            return response.getBody();
        }
        catch(HttpClientErrorException e){
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);
            error.getErrors().forEach((errorMsg)-> {
                if (errorMsg.contains("No user found with given id")){
                    throw new UserNotFoundException((long)doctorId);
                }
            });
            throw new JwtValidationException(e.getResponseBodyAs(String.class));
        }
    }

}
