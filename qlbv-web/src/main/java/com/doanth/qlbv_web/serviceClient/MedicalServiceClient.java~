package com.doanth.qlbv_web.serviceClient;

import com.doanth.qlbv_web.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import java.util.List;

@Component
public class MedicalServiceClient {
    private final RestTemplate restTemplate = new RestTemplate();
    @Autowired
    private  AuthServiceClient authServiceClient;
    private final String getRecordsByPatientIdUrl = "http://localhost:8083/api/medical/records";
    private final String addMedicalRecordUrl = "http://localhost:8083/api/medical/records/add";
    private final String addExaminationUrl = "http://localhost:8083/api/medical/examinations/add";
    private final String doctorGetRecordsByPatientIdUrl = "http://localhost:8083/api/medical/doctor/records";
    private final String getPrescriptionDetailsUrl = "http://localhost:8083/api/medical/prescription/details";
    private final String getPatientsWithMedicalRecordRecentCreated = "http://localhost:8083/api/medical/records/created/recent/patients";
    private final String getPatientsWithExaminationRecentCreated = "http://localhost:8083/api/medical/examinations/created/recent/patients";
    private final String searchPatientsByPatientIdAndFullName = "http://localhost:8083/api/medical/patients/search";

    public MedicalRecordAddForm addMedicalRecord(String accessToken, MedicalRecordAddForm form) throws RefreshTokenException, JwtValidationException {// URL của Auth Service

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("Authorization", "Bearer " + accessToken);
        HttpEntity<MedicalRecordAddForm> request = new HttpEntity<>(form, headers);
        System.out.println(request);
        ResponseEntity<MedicalRecordAddForm> response = null;

        try {
            response = restTemplate.exchange(
                    addMedicalRecordUrl,
                    HttpMethod.POST,
                    request,
                    MedicalRecordAddForm.class
            );
            System.out.println(response);
            return response.getBody();
        } catch (HttpClientErrorException e) {
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);
            if(error.getErrors().contains("Access token expired")){
                AuthResponse authResponse = authServiceClient.handleAccessTokenExpired();
                HttpHeaders newHeaders = new HttpHeaders();
                newHeaders.setContentType(MediaType.APPLICATION_JSON);
                newHeaders.add("Authorization", "Bearer " + authResponse.getAccessToken());
                HttpEntity<?> newRequest = new HttpEntity<>(form,newHeaders);
                response = restTemplate.exchange(
                        addMedicalRecordUrl,
                        HttpMethod.POST,
                        newRequest,
                        MedicalRecordAddForm.class
                );
                return response.getBody();

            };
            throw new JwtValidationException(e.getResponseBodyAsString());
        }
    }
    public Integer addExamination(String accessToken, ExaminationInfoAddDTO form) throws RefreshTokenException, JwtValidationException {// URL của Auth Service

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("Authorization", "Bearer " + accessToken);
        HttpEntity<ExaminationInfoAddDTO> request = new HttpEntity<>(form, headers);
        System.out.println(request);
        ResponseEntity<Integer> response = null;

        try {
            response = restTemplate.exchange(
                    addMedicalRecordUrl,
                    HttpMethod.POST,
                    request,
                    Integer.class
            );
            System.out.println(response);
            return response.getBody();
        } catch (HttpClientErrorException e) {
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);
            if(error.getErrors().contains("Access token expired")){
                AuthResponse authResponse = authServiceClient.handleAccessTokenExpired();
                HttpHeaders newHeaders = new HttpHeaders();
                newHeaders.setContentType(MediaType.APPLICATION_JSON);
                newHeaders.add("Authorization", "Bearer " + authResponse.getAccessToken());
                HttpEntity<?> newRequest = new HttpEntity<>(form,newHeaders);
                response = restTemplate.exchange(
                        addMedicalRecordUrl,
                        HttpMethod.POST,
                        newRequest,
                        Integer.class
                );
                return response.getBody();

            };
            throw new JwtValidationException(e.getResponseBodyAsString());
        }
    }



    public List<MedicalRecordShortDTO> getRecordsByPatientId(String accessToken) throws RefreshTokenException, JwtValidationException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken);

        HttpEntity<?> request = new HttpEntity<>(headers);
        ResponseEntity<List<MedicalRecordShortDTO>> response = null;
        try {
            response = restTemplate.exchange(
                    getRecordsByPatientIdUrl,
                    HttpMethod.GET,
                    request,
                    new ParameterizedTypeReference<List<MedicalRecordShortDTO>>() {
                    }
            );
            System.out.println(response);
            return response.getBody();
        } catch (HttpClientErrorException e) {
//            System.out.println("catch AppointmentServiceClient getSpecialties HttpClientErrorException");
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);
            if(error.getErrors().contains("Access token expired")){
//                System.out.println("catch AppointmentServiceClient getSpecialties if Access token expired");
                AuthResponse authResponse = authServiceClient.handleAccessTokenExpired();
                HttpHeaders newHeaders = new HttpHeaders();
                newHeaders.add("Authorization", "Bearer " + authResponse.getAccessToken());
                HttpEntity<?> newRequest = new HttpEntity<>(newHeaders);
                response = restTemplate.exchange(
                        getRecordsByPatientIdUrl,
                        HttpMethod.GET,
                        newRequest,
                        new ParameterizedTypeReference<List<MedicalRecordShortDTO>>() {
                        }
                );
                return response.getBody();

            };
            throw new JwtValidationException(e.getResponseBodyAsString());
        }
    }
    public List<MedicalRecordShortDTO> doctorGetRecordsByPatientId(Integer patientId, String accessToken) throws RefreshTokenException, JwtValidationException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken);
        String url = doctorGetRecordsByPatientIdUrl + "/" + patientId;
        HttpEntity<?> request = new HttpEntity<>(headers);
        ResponseEntity<List<MedicalRecordShortDTO>> response = null;
        try {
            response = restTemplate.exchange(
                    url,
                    HttpMethod.GET,
                    request,
                    new ParameterizedTypeReference<List<MedicalRecordShortDTO>>() {
                    }
            );
            System.out.println(response);
            return response.getBody();
        } catch (HttpClientErrorException e) {
//            System.out.println("catch AppointmentServiceClient getSpecialties HttpClientErrorException");
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);
            if(error.getErrors().contains("Access token expired")){
//                System.out.println("catch AppointmentServiceClient getSpecialties if Access token expired");
                AuthResponse authResponse = authServiceClient.handleAccessTokenExpired();
                HttpHeaders newHeaders = new HttpHeaders();
                newHeaders.add("Authorization", "Bearer " + authResponse.getAccessToken());
                HttpEntity<?> newRequest = new HttpEntity<>(newHeaders);
                response = restTemplate.exchange(
                        url,
                        HttpMethod.GET,
                        newRequest,
                        new ParameterizedTypeReference<List<MedicalRecordShortDTO>>() {
                        }
                );
                return response.getBody();

            };
            throw new JwtValidationException(e.getResponseBodyAsString());
        }
    }


    public MedicalRecordFullDTO getRecordDetailsByRecordId(String accessToken, Integer recordId) throws RefreshTokenException, JwtValidationException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken);
        String newUrl = getRecordsByPatientIdUrl + "/" + recordId;
        HttpEntity<?> request = new HttpEntity<>(headers);
        ResponseEntity<MedicalRecordFullDTO> response = null;
        try {
            response = restTemplate.exchange(
                    newUrl,
                    HttpMethod.GET,
                    request,
                    MedicalRecordFullDTO.class
            );
            System.out.println(response);
            return response.getBody();
        } catch (HttpClientErrorException e) {
//            System.out.println("catch AppointmentServiceClient getSpecialties HttpClientErrorException");
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);
            if(error.getErrors().contains("Access token expired")){
//                System.out.println("catch AppointmentServiceClient getSpecialties if Access token expired");
                AuthResponse authResponse = authServiceClient.handleAccessTokenExpired();
                HttpHeaders newHeaders = new HttpHeaders();
                newHeaders.add("Authorization", "Bearer " + authResponse.getAccessToken());
                HttpEntity<?> newRequest = new HttpEntity<>(newHeaders);
                response = restTemplate.exchange(
                        newUrl,
                        HttpMethod.GET,
                        newRequest,
                        MedicalRecordFullDTO.class
                );
                return response.getBody();

            };
            throw new JwtValidationException(e.getResponseBodyAsString());
        }
    }

    public PrescriptionDetailDTO getPrescriptionDetail(String accessToken, Integer examinationId) throws RefreshTokenException, JwtValidationException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken);
        String newUrl = getPrescriptionDetailsUrl + "/" + examinationId;
        HttpEntity<?> request = new HttpEntity<>(headers);
        ResponseEntity<PrescriptionDetailDTO> response = null;
        try {
            response = restTemplate.exchange(
                    newUrl,
                    HttpMethod.GET,
                    request,
                    PrescriptionDetailDTO.class
            );
            System.out.println(response);
            return response.getBody();
        } catch (HttpClientErrorException e) {
//            System.out.println("catch AppointmentServiceClient getSpecialties HttpClientErrorException");
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);
            if(error.getErrors().contains("Access token expired")){
//                System.out.println("catch AppointmentServiceClient getSpecialties if Access token expired");
                AuthResponse authResponse = authServiceClient.handleAccessTokenExpired();
                HttpHeaders newHeaders = new HttpHeaders();
                newHeaders.add("Authorization", "Bearer " + authResponse.getAccessToken());
                HttpEntity<?> newRequest = new HttpEntity<>(newHeaders);
                try {
                    response = restTemplate.exchange(
                            newUrl,
                            HttpMethod.GET,
                            newRequest,
                            PrescriptionDetailDTO.class
                    );
                    return response.getBody();
                }
                catch (HttpClientErrorException ex){
                    if(error.getErrors().contains("Prescription details not found")){
                        return null;
                    }
                }

            };

            if(error.getErrors().contains("Prescription details not found")){
                return null;
            }
            throw new JwtValidationException(e.getResponseBodyAsString());
        }
    }
    public PrescriptionDetailDTO getPrescriptionDetailWithExamIdAndPatientId(String accessToken, Integer examinationId, Integer patientId) throws RefreshTokenException, JwtValidationException {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken);
        String newUrl = getPrescriptionDetailsUrl + "/" + examinationId + "?patientId=" + patientId;
        HttpEntity<?> request = new HttpEntity<>(headers);
        ResponseEntity<PrescriptionDetailDTO> response = null;
        try {
            response = restTemplate.exchange(
                    newUrl,
                    HttpMethod.GET,
                    request,
                    PrescriptionDetailDTO.class
            );
            System.out.println(response);
            return response.getBody();
        } catch (HttpClientErrorException e) {
//            System.out.println("catch AppointmentServiceClient getSpecialties HttpClientErrorException");
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);
            if(error.getErrors().contains("Access token expired")){
//                System.out.println("catch AppointmentServiceClient getSpecialties if Access token expired");
                AuthResponse authResponse = authServiceClient.handleAccessTokenExpired();
                HttpHeaders newHeaders = new HttpHeaders();
                newHeaders.add("Authorization", "Bearer " + authResponse.getAccessToken());
                HttpEntity<?> newRequest = new HttpEntity<>(newHeaders);
                try {
                    response = restTemplate.exchange(
                            newUrl,
                            HttpMethod.GET,
                            newRequest,
                            PrescriptionDetailDTO.class
                    );
                    return response.getBody();
                }
                catch (HttpClientErrorException ex){
                    if(error.getErrors().contains("Prescription details not found")){
                        return null;
                    }
                }

            };

            if(error.getErrors().contains("Prescription details not found")){
                return null;
            }
            throw new JwtValidationException(e.getResponseBodyAsString());
        }
    }


    public List<UserDetailsFromDB> getPatientsWithMedicalRecordRecentCreated (String accessToken) throws JwtValidationException, RefreshTokenException {
        String url = getPatientsWithMedicalRecordRecentCreated;
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken);
        HttpEntity<?> request = new HttpEntity<>(headers);
        ResponseEntity<List<UserDetailsFromDB>> response = null;
        try{
            response= restTemplate.exchange(
                    url, HttpMethod.GET, request, new ParameterizedTypeReference<List<UserDetailsFromDB>>() {}
            );
            return response.getBody();
        }
        catch(HttpClientErrorException e){
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);

            if(error.getErrors().contains("Access token expired")){
//                System.out.println("catch AppointmentServiceClient getSpecialties if Access token expired");
                AuthResponse authResponse = authServiceClient.handleAccessTokenExpired();
                HttpHeaders newHeaders = new HttpHeaders();
                newHeaders.add("Authorization", "Bearer " + authResponse.getAccessToken());
                HttpEntity<?> newRequest = new HttpEntity<>(newHeaders);
                try {
                    response = restTemplate.exchange(
                            url,
                            HttpMethod.GET,
                            newRequest,
                            new ParameterizedTypeReference<List<UserDetailsFromDB>>() {}
                    );
                    return response.getBody();
                }
                catch (HttpClientErrorException ex){
                    throw new JwtValidationException(ex.getResponseBodyAs(String.class));
                }

            };

            throw new JwtValidationException(e.getResponseBodyAs(String.class));
        }
    }
    public List<UserDetailsFromDB> getPatientsWithExaminationRecentCreated (String accessToken) throws JwtValidationException, RefreshTokenException {
        String url = getPatientsWithExaminationRecentCreated;
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken);
        HttpEntity<?> request = new HttpEntity<>(headers);
        ResponseEntity<List<UserDetailsFromDB>> response = null;
        try{
            response= restTemplate.exchange(
                    url, HttpMethod.GET, request, new ParameterizedTypeReference<List<UserDetailsFromDB>>() {}
            );
            return response.getBody();
        }
        catch(HttpClientErrorException e){
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);

            if(error.getErrors().contains("Access token expired")){
//                System.out.println("catch AppointmentServiceClient getSpecialties if Access token expired");
                AuthResponse authResponse = authServiceClient.handleAccessTokenExpired();
                HttpHeaders newHeaders = new HttpHeaders();
                newHeaders.add("Authorization", "Bearer " + authResponse.getAccessToken());
                HttpEntity<?> newRequest = new HttpEntity<>(newHeaders);
                try {
                    response = restTemplate.exchange(
                            url,
                            HttpMethod.GET,
                            newRequest,
                            new ParameterizedTypeReference<List<UserDetailsFromDB>>() {}
                    );
                    return response.getBody();
                }
                catch (HttpClientErrorException ex){
                    throw new JwtValidationException(ex.getResponseBodyAs(String.class));
                }

            };

            throw new JwtValidationException(e.getResponseBodyAs(String.class));
        }
    }
    public List<UserDetailsFromDB> searchPatient (String patientId,String patientFullName,String accessToken) throws JwtValidationException, RefreshTokenException {
        String url = searchPatientsByPatientIdAndFullName;
        if(patientId != null && patientFullName != null){
            if(patientId.equals("") && !patientFullName.equals("")){
                url = url + "?fullName=" + patientFullName;
            }
            if (!patientId.equals("") && patientFullName.equals("")){
                url = url + "?id=" + patientId;
            }
            if (!patientId.equals("") && !patientFullName.equals("")){
                url = url + "?id=" + patientId + "&fullName=" + patientFullName;
            }
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken);
        HttpEntity<?> request = new HttpEntity<>(headers);
        ResponseEntity<List<UserDetailsFromDB>> response = null;
        try{
            response= restTemplate.exchange(
                    url, HttpMethod.GET, request, new ParameterizedTypeReference<List<UserDetailsFromDB>>() {}
            );
            return response.getBody();
        }
        catch(HttpClientErrorException e){
            ErrorDTO error = e.getResponseBodyAs(ErrorDTO.class);

            if(error.getErrors().contains("Access token expired")){
//                System.out.println("catch AppointmentServiceClient getSpecialties if Access token expired");
                AuthResponse authResponse = authServiceClient.handleAccessTokenExpired();
                HttpHeaders newHeaders = new HttpHeaders();
                newHeaders.add("Authorization", "Bearer " + authResponse.getAccessToken());
                HttpEntity<?> newRequest = new HttpEntity<>(newHeaders);
                try {
                    response = restTemplate.exchange(
                            url,
                            HttpMethod.GET,
                            newRequest,
                            new ParameterizedTypeReference<List<UserDetailsFromDB>>() {}
                    );
                    return response.getBody();
                }
                catch (HttpClientErrorException ex){
                    throw new JwtValidationException(ex.getResponseBodyAs(String.class));
                }

            };

            throw new JwtValidationException(e.getResponseBodyAs(String.class));
        }
    }
}
